781333FF	Scheduling research has increasingly taken the concept of learning into consideration. In general, a worker’s learning effect on a job depends not only on the total processing time of the jobs that he has processed but also on the job’s position. Besides, in the early stage of processing a given set of jobs, the worker is not familiar with the operations, so the learning effect on the jobs scheduled early is not apparent. Based on the above observations, we introduce in this paper a position-weighted learning effect model based on sum-of-logarithm-processing-times and job position for scheduling problems. We provide optimal solutions for the single-machine problems to minimize the makespan and the total completion time, and for the single-machine problem to minimize the sum of weighted completion times, the maximum lateness, and the total tardiness under an agreeable situation. We also solve two special cases of the flowshop problem under the learning model.
800AC70E	We propose a hybrid scheduling scheme which can efficiently support various types of traffic in a cooperative relay system of downlink cellular networks. The hybrid scheduling scheme harmonizes the shared-channel resource allocation scheme and dedicated-channel resource allocation scheme to accommodate various traffic in heterogeneous traffic environments. We show that the proposed scheme significantly improves the system performance in terms of system throughput in heterogeneous traffic environments through the analysis of the system capacity and throughput.
7E26F65E	The existence of the learning effect in many manufacturing systems is undoubted; thus, it is worthwhile that it be taken into consideration during production planning to increase production efficiency. Generally, it can be done by formulating the specified problem in the scheduling context and optimizing an order of jobs to minimize the given time criteria. To carry out a reliable study of the learning effect in scheduling fields, a comprehensive survey of the related results is presented first. It reveals that most of the learning models in scheduling are based on the learning curve introduced by Wright. However, further study about learning itself pointed out that the curve may be an ldquoSrdquo-shaped function, which has not been considered in the scheduling domain. To fill this gap, we analyze a scheduling problem with a new experience-based learning model, where job processing times are described by ldquoSrdquo-shaped functions that are dependent on the experience of the processor. Moreover, problems with other experience-based learning models are also taken into consideration. We prove that the makespan minimization problem on a single processor is NP-hard or strongly NP-hard with the most of the considered learning models. A number of polynomially solvable cases are also provided.
7E8F52BD	We consider the problem of scheduling a set of n preemptable tasks in a system having r resources. Each task has an arbitrary, but known, worst case processing time and a deadline, and may request simultaneous use of a number of resources. A resource can be used either in shared mode or exclusive mode. In this paper, we develop and evaluate algorithms for determining whether or not a set of preemptive tasks is schedulable in such a real-time system, and if so, determining a schedule for it. This scheduling problem is known to be computationally intensive. In many real-time application environments, tasks are scheduled dynamically, and hence the scheduling algorithms used must have low run-time costs. To keep run-time costs low, we propose the use of suboptimal but practical algorithms that employ computationally simple heuristics. The computational complexity of our algorithms for scheduling n tasks in a system having r resources is O(rn2), which is very much lower than that of known optimal algorithms. We report on the results of simulation studies performed on such heuristic preemptive scheduling algorithms and the sensitivity of the performance of the algorithms with respect to various scheduling parameters. These studies show that due to the complexity of the problem, straightforward heuristics do not perform satisfactorily. However, an algorithm that uses combinations of such heuristics in conjunction with limited backtracks works very well.
7F8DBD8E	We propose and analyze a proportional share resource allocation algorithm for realizing real-time performance in time-shared operating systems. Processes are assigned a weight which determines a share (percentage) of the resource they are to receive. The resource is then allocated in discrete-sized time quanta in such a manner that each process makes progress at a precise, uniform rate. Proportional share allocation algorithms are of interest because: they provide a natural means of seamlessly integrating real and non-real-time processing; they are easy to implement; they provide a simple and effective means of precisely controlling the real-time performance of a process; and they provide a natural means of policing so that processes that use more of a resource than they request have no ill-effect on well-behaved processes. We analyze our algorithm in the context of an idealized system in which a resource is assumed to be granted in arbitrarily small intervals of time and show that our algorithm guarantees that the difference between the service time that a process should receive and the service time it actually receives is optimally bounded by the size of a time quantum. In addition, the algorithm provides support for dynamic operations, such as processes joining or leaving the competition, and for both fractional and non-uniform time quanta. As a proof of concept we have implemented a prototype of a CPU scheduler under FreeBSD. The experimental results shows that our implementation performs within the theoretical bounds and hence supports real-time execution in a general purpose operating system.
7C4B92E0	We consider a class of machine scheduling problems in which the processing time of a task is dependent on its starting time in a schedule. On reviewing the literature on this topic, we provide a framework to illustrate how models for this class of problems have been generalized from the classical scheduling theory. A complexity boundary is presented for each model and related existing results are consolidated. We also introduce some enumerative solution algorithms and heuristics and analyze their performance. Finally, we suggest a few interesting areas for future research.
80F25302	In order to apply the results of formal studies of real-time task models, a practitioner must account for the effects of phenomena present in the implementation but not present in the formal model. We study the feasibility and schedulability problems for periodic tasks that must compete for the processor with interrupt handlers - tasks that are assumed to always have priority over application tasks. The emphasis in the analysis is on deadline driven scheduling methods. We develop conditions that solve the feasibility and schedulability problems and demonstrate that our solutions are computationally feasible. Lastly, we compare our analysis with others developed for static priority task systems.
7B24499B	Scheduling plays a vital role in LTE downlink systems with Multiple Input and Multiple Output (MIMO) antennas. We consider the MIMO downlink scheduling problem at the base station (BS) in LTE networks under several practical constraints mandated by the 3GPP standards. We Define a new construct called transmission mode, which denotes a particular choice of MIMO operational mode, precoding matrix, transmission rank, as well as the modulation and coding schemes (MCSs) of up to two codewords and show that both LTE systems require that each scheduled user be served using only one transmission mode in every subframe. We prove that the resulting scheduling problems are NP-hard under both backlogged and finite queue traffic models, and then develop a unified low-complexity greedy algorithm that yields solutions guaranteed to be within 1/2 of the respective optima. Extensive performance evaluation in realistic settings reveals near-optimal performance of our proposed algorithm and that it significantly outperforms the state of the art, especially under the more practical, finite queue model.
78998183	Most scheduling papers consider flexible machining and assembly systems as being independent. In this paper, a heuristic two-level scheduling algorithm for a system consisting of a machining and an assembly subsystem is developed. It is shown that the upper level problem is equivalent to the two machine flow shop problem. The algorithm at the lower level schedules jobs according to the established product and part priorities. Related issues, such as batching, due dates, process planning and alternative routes, are discussed. The algorithm and associated concepts are illustrated on a number of numerical examples.
59A985F6	This paper, as well as coupled paper [2], deal with various aspects of scheduling algorithms dedicated for processing in parallel computing environments. In this paper, for the exemplary problem, namely the flow-shop scheduling problem with makespan criterion, there are proposed original methods for parallel analysis of a solution as well as a group of concentrated and/or distributed solutions, recommended for the use in metaheuristic approaches with single-thread trajectory. Such methods examine in parallel consecutive local sub-areas of the solution space, or a set of distributed solutions called population, located along the single trajectory passed through the space. Supplementary multi-thread search techniques applied in metaheuristics have been discussed in complementary our paper 
789C7E4B	The following type of problem arises in practice: in a node-weighted graph G, find a minimum-weight node set that satisfies certain conditions and, in addition, induces a perfectly matchable subgraph of G. This has led us to study the convex hull of incidence vectors of node sets that induce perfectly matchable subgraphs of a graph G, which we call the perfectly matchable subgraph polytope of G. For the case when G is bipartite, we give a linear characterization of this polytope, i.e., specify a system of linear inequalities whose basic solutions are the incidence vectors of perfectly matchable node sets of G. We derive this result by three different approaches, using linear programming duality, projection, and lattice polyhedra, respectively. The projection approach is used here for the first time as a proof method in polyhedral combinatorics, and seems to have many similar applications. Finally, we completely characterize the facets of our polytope; i.e., we separate the essential inequalities of our linear defining system from the redundant ones.
8023DC2E	Most systems which are required to operate under severe real-time constraints assume that all tasks and their characteristics are known a priori. Scheduling of such tasks can be done statistically. Further, scheduling algorithms operating under such conditions are usually limited to multiprocessor configurations. The authors present a scheduling algorithm which works dynamically and on loosely coupled distributed systems for tasks with hard real-time constraints; i.e., the tasks must meet their deadlines. It uses a scheduling component local to every node and a distributed scheduling scheme which is specifically suited to hard real-time constraints and other timing considerations. Periodic tasks, nonperiodic tasks, scheduling overheads, communication overheads due to scheduling and preemption are all accounted for in the algorithm. Simulation studies are used to evaluate the performance of the algorithm.
8134F61B	In dynamic real-time task systems, tasks that are subject to deadlines are allowed to join and leave the system. In previous work, Stoica et al. and Baruah et al. presented conditions under which such joins and leaves may occur in fair-scheduled uniprocessor systems without causing missed deadlines. In this paper, we extend their work by considering fair-scheduled multiprocessors. We show that their conditions are sufficient on M processors, under any deadline-based Pfair scheduling algorithm, if the utilization of every subset of M − 1 tasks is at most one. Further, for the general case in which task utilizations are not restricted in this way, we derive sufficient join/leave conditions for the PD2 Pfair algorithm. We also show that, in general, these conditions cannot be improved upon without causing missed deadlines.
803B7CFD	Preemptive multitasking, a popular technique for timesharing of computational resources in software-based systems, faces considerable difficulties when applied to partially reconfigurable hardware. In this paper, we propose a cooperative scheduling technique for reconfigurable hardware threads as a feasible compromise between computational efficiency and implementation complexity. We have implemented this mechanism for the multithreaded reconfigurable operating system ReconOS and evaluated its overheads and performance on a prototype.
7EFC0944	We consider finite graphs whose edges are labeled with elements, called colors, taken from a fixed finite alphabet. We study the problem of determining whether there is an infinite path where either (i) all colors occur with a fixed asymptotic frequency, or (ii) there is a constant that bounds the difference between the occurrences of any two colors for all prefixes of the path. These properties can be viewed as quantitative refinements of the classical notion of fair path in a concurrent system, whose simplest form checks whether all colors occur infinitely often. Our notions provide stronger criteria, particularly suitable for scheduling applications based on a coarse-grained model of the jobs involved. In particular, they enforce a given set of priorities among the jobs involved in the system. We show that both problems we address are solvable in polynomial time, by reducing them to the feasibility of a linear program. We also consider two-player games played on finite colored graphs where the goal is one of the above frequency-related properties. For all the goals, we show that the problem of checking whether there exists a winning strategy is Co-NP-complete.
7AB7CE85	This paper presents a generalized formulation of precedence constrained scheduling where the number of dependent tasks which are to be scheduled before the task itself can be scheduled is a variable. This formulation is capable of modeling a number of scheduling and path-finding problems. An algorithm is presented to solve the problem of finding the minimum time schedule. Variants are discussed. One simple variant is shown to be NP-Complete.	
77EDE772	This paper presents a modified harmony search (HS) for the flow shop scheduling problem, with the objective to minimize the maximum completion time of all jobs, i.e. makespan. Firstly, a simple memory consideration rule based on a recombination operator is employed to generate a new harmony. Secondly, an insertion procedure is used as a pitch adjustment rule. Thirdly, a neighborhood local strategy is embedded into the algorithm to enhance the solution quality. To validate the proposed algorithm, various computational tests are established using a set of 60 instances from Taillard Benchmark [1]. The HS algorithm is compared to two constructive heuristics from literature, the NEH heuristic [2], and the stochastic greedy heuristic (SG) [6]. The obtained results show the superiority of the proposed algorithm in terms of solution quality.
7D47A9F7	The problem considered in this paper is the deterministic scheduling of tasks on a set of identical processors. However, the model presented differs from the classical one by the requirement that certain tasks need more than one processor at a time for their processing. This assumption is especially justified in some microprocessor applications and its impact on the complexity of minimizing schedule length is studied. First we concentrate on the problem of nonpreemptive scheduling. In this case, polynomial-time algorithms exist only for unit processing times. We present two such algorithms of complexity O(n) for scheduling tasks requiring an arbitrary number of processors between 1 and k at a time where k is a fixed integer. The case for which k is not fixed is shown to be NP-complete. Next, the problem of preemptive scheduling of tasks of arbitrary length is studied. First an algorithm for scheduling tasks requiring one or k processors is presented. Its complexity depends linearly on the number of tasks. Then, the possibility of a linear programming formulation for the general case is analyzed.
75FC5AC9	Hadoop is a framework for processing large amount of data in parallel with the help of Hadoop Distributed File System (HDFS) and MapReduce framework. Job scheduling is an important process in Hadoop MapReduce. Hadoop comes with three types of schedulers namely FIFO, Fair and Capacity Scheduler. The schedulers are now a plug gable component in the Hadoop MapReduce framework. When jobs have a dependency on an external service like database or Web service may leads to the failure of tasks due to overloading. In this scenario, Hadoop needs to re-run the tasks in another slots. To address this issue, Task Tracker aware scheduling has introduced. This scheduler enables users to configure a maximum load per Task Tracker in the Job Configuration itself. The algorithm will not allow a task to run and fail if the load of the Task Tracker reaches its threshold for the job. Also this scheduler allows the users to select the Task Tracker's per Job in the Job configuration.
7B1B79AE	This paper presents an overview of assignment and sequencing models that are used inthe scheduling of process operations with mathematical programming techniques. Althoughscheduling models are problem specific, there are common features which translate intosimilar types of constraints. Two major categories of scheduling models are identified:single-unit assignment models in which the assignment of tasks to units is known a priori,and multiple-unit assignment models in which several machines compete for the processingof products. The most critical modeling issues are the time domain representation and networkstructure of the processing plant. Furthermore, a summary of the major features of thescheduling model is presented along with computational experience, as well as a discussionon their strengths and limitations.
7535C3B9	We consider a family of problems of scheduling a set of starting time dependent tasks with release times and linearly increasing/decreasing processing rates on a single machine to minimize the makespan. We first present an equivalence relationship between several pairs of problems. Based on this relationship, we show that the makespan problem with arbitrary release times and identical increasing processing rates is strongly NP-complete and the corresponding case with only one non-zero release time is at least NP-complete in the ordinary sense. On the other hand, the makespan problem with arbitrary release times and identical decreasing processing rates is solvable in O(n6 log n) time by a dynamic programming algorithm. Using a different approach, we also show that, when the normal processing times are identical, the makespan problem with arbitrary release times and increasing/decreasing processing rates is strongly NP-complete and the corresponding case with only one non-zero release time is at least NP-complete in the ordinary sense.
7FA0527B	The PD2 Pfair/ERfair scheduling algorithm is the most efficient known algorithm for optimally scheduling periodic tasks on multiprocessors. In this paper, we prove that PD2 is also optimal for scheduling “rate-based” tasks whose processing steps may be highly jittered. The rate-based task model we consider generalizes the widely-studied sporadic task model.
7DE991AC	The paper presents scheduling algorithms in look-ahead reconfigurable multi-processor systems. In multiprocessor systems with message passing, link connection reconfiguration is a very promising alternative to fixed interconnection networks. To eliminate connection reconfiguration time overheads, a new approach called look-ahead dynamic link reconfiguration has been proposed. It consists in preparing link connections in advance in parallel with program execution. An application program is partitioned into sections, which are executed using redundant communication resources. Two algorithms for scheduling parallel program graphs are presented. The first algorithm, based on list scheduling utilizes a genetic heuristic for section partitioning. The second approach combines scheduling and partitioning into one heuristic.
7DBC3C41	The problem of multiprogram scheduling on a single processor is studied from the viewpoint of the characteristics peculiar to the program functions that need guaranteed service. It is shown that an optimum fixed priority scheduler possesses an upper bound to processor utilization which may be as low as 70 percent for large task sets. It is also shown that full processor utilization can be achieved by dynamically assigning priorities on the basis of their current deadlines. A combination of these two scheduling techniques is also discussed.
76B2EE53	In this study, we propose a new scheduling model with position-dependent deterioration, in which the processing time of a job is defined by an increasing function of total weighted normal processing time of jobs prior to it in the sequence, where the weight is position dependent. We show that some single machine scheduling problems remain polynomially solvable under the proposed model, respectively. In addition, we show that some special cases of the flow shop scheduling problems can be optimally solved by polynomial time algorithm, respectively.
7D3CE9E4	Extended T-N Plane Abstraction (E-TNPA) proposed inthis paper realizes work-conserving and efficient optimalreal-time scheduling on multiprocessors relative to the originalT-N Plane Abstraction (TNPA). Additionally a schedulingalgorithm named NVNLF (No Virtual Nodal LaxityFirst) is presented for E-TNPA. E-TNPA and NVNLF relaxthe restrictions of TNPA and the traditional algorithmLNREF, respectively. Arbitrary tasks can be preferentiallyexecuted by both tie-breaking rules and time apportionmentpolicies in accordance with various system requirementswith several restrictions. Simulation results show that E-TNPAsignificantly reduces the number of task preemptionsas compared to TNPA.
7FF76847	This paper presents a new scheduling algorithm that maximizes the performance of a design under resource constraints in high-level synthesis. The algorithm tries to achieve the maximal utilization of resources and the minimal waste of clock slack time. Moreover, it exploits the technique of bit-level chaining to target high-speed designs. The algorithm tries non-integer multiple-cycling and chaining, which allows multiple cycle execution of chained operations, to further increase the performance at the cost of small increase in the complexity of the control unit. Experimental results on several datapath-intensive designs show significant improvement in execution time, over the conventional scheduling algorithms.
766DA98B	Recently learning effects in scheduling have received considerable attention in the literature. All but one paper are based on the learning-by-doing (or autonomous learning) assumption, even though proactive investments in know how (induced learning) are very important from a practical point of view. In this review we first discuss the questions why and when learning effects in scheduling environments might occur and should be regarded from a planning perspective. Afterwards we give a concise overview on the literature on scheduling with learning effects.
7747E43E	This paper describes a heuristic approach for solving the problem of dynamically scheduling tasks in a real-time system where tasks have deadlines and general resource requirements. The crux of our approach lies in the heuristic function used to select the task to be scheduled next. The heuristic function is composed of three weighted factors. These factors explicitly consider information about real-time constraints of tasks and their utilization of resources. Simulation studies show that the weights for the various factors in the heuristic function have to be fine-tuned in order to obtain a degree of success in the range of 75-88 percent of that obtained via exhaustive search. However, modifying the approach to use limited backtracking improves the degree of success substantially to as high as 99.5 percent. This improvement is observed even when the initial set of weights are not tailored for a particular set of tasks. Simulation studies also show that in most cases the schedule determined by the heuristic algorithm is optimal or close to optimal.
7FEF7274	The need for supportingvariety of hard and soft real-time, as well as best effort applications in a multimedia computing environment requires an operating system framework that: (1) enables different schedulers to be employed for different application classes, and (2) provides protection between the various classes of applications. We argue that these objectives can be achieved by hierarchical partitioning of CPU bandwidth, in which an operating system partitions the CPU bandwidth among various application classes, and each application class, in turn, partitions its allocation (potentially using a different scheduling algorithm) among its sub-classes or applications. We present Start-time Fair Queuing (SFQ) algorithm, which enables such hierarchical partitioning. We have implemented a hierarchical scheduler in Solaris 2.4. We describe our implementation, and demonstrate its suitability for multimedia operating systems. 
7B8345BF	Scheduling with learning effect and deteriorating jobs has become more popular. However, most of the research assume that the setup time is negligible or a part of the job processing time. In this paper, we propose a model where the deteriorating jobs, the learning effect, and the setup times are present simultaneously. Under the proposed model, the setup time is past-sequence-dependent and the actual job processing time is a general function of the processing times of the jobs already processed and its scheduled position. We provide the optimal schedules for some single-machine problems.
5F89548A	We consider the implementation of a Pfair real-time scheduler on a symmetric multiprocessor (SMP). Although SMPs are in many ways well-suited for Pfair scheduling, experimental results presented herein suggest that bus contention resulting from the simultaneous scheduling of all processors can substantially degrade performance. To correct this problem, we propose a staggered model for Pfair scheduling that strives to improve performance by more evenly distributing bus traffic over time. Additional simulations and experiments with a scheduler prototype are presented to demonstrate the effectiveness of the staggering approach. In addition, we discuss other techniques for improving performance while maintaining worst-case predictability. Finally, we present an efficient scheduling algorithm to support the proposed model and briefly explain how existing Pfair results apply to staggered scheduling.
7ACE40FE	This paper considers single-machine scheduling problems with simultaneous consideration of due date assignment, past-sequence-dependent (p-s-d) delivery times, and position-dependent learning effects. By p-s-d delivery times, we mean that the delivery time of a job is proportional to the job’s waiting time. Specifically, we study four variants of the problem: (i) the variant of total earliness and tardiness with common due date assignment (referred to as TETDC), (ii) the variant of total earliness and weighted number of tardy jobs with CON due date assignment (referred to as TEWNTDC), (iii) the variant of total earliness and weighted number of tardy jobs with slack due date assignment (referred to as TEWNTDS), and (iv) the variant of weighted number of tardy jobs with different due date assignment (referred to as WNTDD). We derive the structural properties of the optimal schedules and show that the variants TETDC, TEWNTDC and TEWNTDS are all polynomially solvable. Although the complexity status of the variant WNTDD is still open, we show that two special cases of it are polynomially solvable.
7A247C2D	The paper is devoted to some single-machine scheduling problems with variable job processing times. The objectives are to minimize the makespan (i.e., the maximum completion time of all jobs), and to minimize the total completion time. For some special cases, we show that these problems can be solved in polynomial time. For some another special cases of the makespan and the total completion time minimization problems, we prove that an optimal schedule has an V-shape property in terms of processing times. We also propose a heuristic algorithm by utilizing the V-shape property.
7B8594DD	The authors study contention-based bus-control schemes for scheduling processors in using a bit-parallel shared bus. The protocol is designed under the requirements that each processor exhibit a random access behavior, that there be no centralized bus control in the system, and that access be granted in real time. The proposed scheme is based on splitting algorithms used in conventional contention-resolution schemes, and utilizes two-state information obtained from collision detection. Two versions of the bus-control scheme are studied. The static one resolves contentions of N requesting processors in an average of O(logW/2N) iterations, where W is the number of bits in the bit-parallel bus. An adaptive version resolves contentions in an average time that is independent of N. 
81273310	We consider a single-processor scheduling model where the execution time of a task is a decreasing linear function of its starting time. The complexity of the problem of minimizing the number of late tasks remains unknown for a set of tasks with identical due dates. We present an O(n2)-time dynamic programming algorithm for solving this problem.
7DEF560D	This paper presents a new algorithm for scheduling of sporadic task systems with arbitrary deadlines on identica l multiprocessor platforms. The algorithm is based on the concept of semi-partitioned scheduling, in which most task s are fixed to specific processors, while a few tasks migrate across processors. Particularly, we design the algorithm s o that tasks are qualified to migrate only if a task set cannot be partitioned any more, and such migratory tasks migrate from one processor to another processor only once in each period. The scheduling policy is then subject to Earliest Deadline First. Simulation results show that the algorithm delivers competitive scheduling performance to the state- of- the-art, with a smaller number of context switches.
76061C10	Scheduling with learning effects has attracted growing attention of the scheduling research community. A recent survey classifies the learning models in scheduling into two types, namely position-based learning and sum-of-processing-times-based learning. However, the actual processing time of a given job drops to zero precipitously as the number of jobs increases in the first model and when the normal job processing times are large in the second model. Motivated by this observation, we propose a new learning model where the actual job processing time is a function of the sum of the logarithm of the processing times of the jobs already processed. The use of the logarithm function is to model the phenomenon that learning as a human activity is subject to the law of diminishing return. Under the proposed learning model, we show that the scheduling problems to minimize the makespan and total completion time can be solved in polynomial time. We further show that the problems to minimize the maximum lateness, maximum tardiness, weighted sum of completion times and total tardiness have polynomial-time solutions under some agreeable conditions on the problem parameters.
7B54C0EC	This paper investigates the scheduling problem for a single-cell distributed multiple-input multiple-output (d-MIMO) downlink system with a massive number of remote access units (RAUs), N. We first derive the ergodic rate expressions for both the single RAU transmission (SRT) and the cooperative RAU transmission (CRT) modes as functions of long-term channel state information (CSI). Then, greedy scheduling algorithms aiming for maximizing the ergodic sum rate for the massive d-MIMO system using local long-term CSI are proposed. To mitigate intra-cell interference, a two-stage greedy scheduling algorithm (GSA) is developed to further improve the ergodic sum rate. Asymptotic analysis reveals that with infinite N intra-cell interference can be efficiently mitigated. Simulation results verify the derived expressions and demonstrate that the two-stage GSA exhibits a higher ergodic sum rate.
7E30BF29	So far, the Link-status Dependent Scheduling (LDS) Algorithm in HR-WPAN (High Rate Wireless Personal Area Network) mainly focused on the throughput elevation in terms of an entire network. However, in the LDS algorithm the throughput of each DEV (Device) is not sensibly considered for the elevation. For instance in case where the DEV has been connected under the bad channel quality, the LDS algorithm does not clearly provide avoidance of the bad user experience of the UE. From this consideration, we introduce a new algorithm which is Guaranteed Scheduling for Worst-case (GSW) that the throughput of each DEV can be individually guaranteed.
7CE4778B	In this paper, we present surplus fair scheduling (SFS), a proportional-share CPU scheduler designed for symmetric multiprocessors. We first show that the infeasibility of certain weight assignments in multiprocessor environments results in unfairness or starvation in many existing proportional-share schedulers. We present a novel weight readjustment algorithm to translate infeasible weight assignments to a set of feasible weights. We show that weight readjustment enables existing proportional-share schedulers to significantly reduce, but not eliminate, the unfairness in their allocations. We then present surplus fair scheduling, a proportional-share scheduler that is designed explicitly for multiprocessor environments. We implement our scheduler in the Linux kernel and demonstrate its efficacy through an experimental evaluation. Our results show that SFS can achieve proportionate allocation, application isolation and good interactive performance, albeit at a slight increase in scheduling overhead. We conclude from our results that a proportional-share scheduler such as SFS is not only practical but also desirable for server operating systems.
80829446	The services received by a process from a time-sharing operating system can be characterized by a resource count ∑ wiRij where Rij is the number of units of service received by process j from resource i and wi is the cost per unit of the service. Each class of users can be characterized by a policy function which specifies the amount of service a user who belongs to this class should receive as a function of time. Priority changes dynamically as a function of the difference between the service promised to the user by the policy function and the service he actually receives. A scheduling and swapping algorithm which keeps the resource count of each process above its policy function will provide the specified level of service. Overhead can be reduced by avoiding swaps of processes which have received at least this level of service. The algorithm has been implemented in a general purpose operating system, and it has provided significantly better service to interactive and to batch jobs than the previous scheduler.
7C9912E6	In multiuser MIMO-OFDM closed-loop system downlink, a proper scheduling algorithm can be used to extract the multi-user diversity by pouring more space-time-frequency (STF) resources to the user with better channel quality. For these systems, we aim to achieve further improvement without increasing the feedback overhead, and without sacrificing the performance gain the multiuser scheduling can provide. In this paper, a new space-frequency precoding scheme is proposed which makes better use of the additional diversity among different STF resources. In this scheme, the symbol streams at different STF resource are rotated before transmitting. These symbol streams should belong to the same user and have the same modulation and coding (MC) level. The rotation balances the signal to interference plus noise ratio (SINR) of each symbol stream, the average bit error rate (BER) performance is improved. With linear receiver, we proposed to use FFT basis as the rotation. Two cases occurred in space division multiple assess (SDMA) system are discussed. By the simulations in 3GPP long term evaluation (LTE) environment, the proposed scheme is proved to achieve lower BER and higher throughput than the existing systems.
27007EBE	This note considers a problem of minimum length scheduling for a set of messages subject to precedence constraints for switching and communication networks, and shows some improvements upon previous results on the problem.
7B33D9F8	This paper presents an EDF-based algorithm, called Earliest Deadline Deferrable Portion (EDDP), for efficient scheduling of recurrent real-time tasks on multiprocessor systems. The design of EDDP is based on the portioned scheduling technique which classifies each task into a fixed task or a migratable task. A fixed task is scheduled on the dedicated processor without migrations. A migratable task is meanwhile permitted to migrate between the particular two processors. In order to curb the cost of task migrations, EDDP makes at most M -- 1 migratable tasks on M processors. The scheduling analysis derives the condition for a given task set to be schedulable. It is also proven that no tasks ever miss deadlines, if the system utilization does not exceed 65%. Beyond the theoretical analysis, the effectiveness of EDDP is evaluated through simulation studies. Simulation results show that EDDP achieves high system utilization with a small number of preemptions, compared with the traditional EDF-based algorithms.
784A8116	In classical scheduling theory job processing times are constant. However, there are many situations where processing time of a job depends on the starting time of the job in the queue. This paper reviews the rapidly growing literature on single machine scheduling models with time dependent processing times. Attention is focused on linear, piecewise linear and non-linear processing time functions for jobs. We survey known results and introduce new solvable cases. Finally, we identify the areas and give directions where further research is needed.
105F2D6E	This work considers a problem of optimal query processing in heterogeneous and distributed database systems. A global query submitted at a local site is decomposed into a number of queries processed at the remote sites. The partial results returned by the queries are integrated at a local site. The paper addresses a problem of an optimal scheduling of queries that minimizes time spend on data integration of the partial results into the final answer. A global data model defined in this work provides a unified view of the heterogeneous data structures located at the remote sites and a system of operations is defined to express the complex data integration procedures. This work shows that the transformations of an entirely simultaneous query processing strategies into a hybrid (simultaneous/sequential) strategy may in some cases lead to significantly faster data integration. We show how to detect such cases, what conditions must be satisfied to transform the schedules, and how to transform the schedules into the more efficient ones.
80811368	In order to provide efficient support of interactive packet services on downlink dedicated channels (DCH) in a WCDMA FDD (frequency division duplexing) system, we envisage a novel MAC measurement based (MMB) packet scheduling algorithm. The MMB scheduler switches packets between DCH of different rates based on traffic volume measurements of their corresponding serving DCH buffers. Algorithm performance has been evaluated by system simulations in terms of average packet throughput. Numerical results show that the provided MMB packet scheduling algorithm has consistent performance for different traffic sources and various DCH combinations studied, arguing its capabilities of robust handling of multiple services of interactive class and support of elastic access capacity.
7DB1889F	This paper studies an electricity producer's long-term optimality in the case of a multireservoir hydropower system. The model solves the optimal production process and trading strategy of electricity and weather derivatives by maximizing the utility from production and terminal water reservoir level. The optimal trading strategy hedges the rainfall and electricity price uncertainties.
7C179829	The algorithms for solving ATM cell-scheduling problem include first-in-first-out (FIFO), static priority (SPR), dynamically weighted priority scheduling (DWPS) as well as other traditional schemes. However, these traditional algorithms lack flexibility. FIFO and SPR cannot adapt to changes in the cell flow environment. DWPS on the other hand, is more adaptable to changing traffic flow. But if the cell flow changes dramatically, the performance of this method is also not very good. In order to address these issues, we propose the framework of evolvable fuzzy system (EFS). The system is intrinsically evolvable and able to carry out on-line adaptation to meet the desired QoS requirement. The EFS is realizable as a form of evolvable fuzzy hardware (EFH) by means of a reconfigurable fuzzy inference chip (RFIC). With an implementation of the EFS as EFH which carries out intrinsic evolution and on-line adaptation, some open issues pertinent to evolvable hardware (EHW) can be addressed.
7C367647	In this paper we investigate a single machine scheduling problem with time dependent processing times and group technology (GT) assumption. By time dependent processing times and group technology assumption, we mean that the group setup times and job processing times are both increasing functions of their starting times, i.e., group setup times and job processing times are both described by function which is proportional to a linear function of time. We attempt to minimize the makespan with ready times of the jobs. We show that the problem can be solved in polynomial time when start time dependent processing times and group technology are considered simultaneously.
78411C7B	In this note, we show that the main results in the two papers [C.C. Wu, W.C. Lee, Single-machine and flowshop scheduling with a general learning effect model, Computers and Industrial Engineering 56 (2009) 1553–1558, W.C. Lee, C.C. Wu, Some single-machine and m-machine flowshop scheduling problems with learning considerations, Information Sciences 179 (2009) 3885–3892] are incorrect.
7B2C2E92	This paper deals with a single machine scheduling problem with start time dependent job processing times. The job processing times are characterized by decreasing linear functions dependent on their start times. The problem is to find a schedule for which the total weighted completion time is minimized. It is proved that the problem is NP-hard. Some properties of special cases of the general problem are also given. Based on these results, two heuristic algorithms are constructed and their performance is compared.
7F2EB872	Optimal multiprocessor real-time schedulers incur significant overhead for preemptions and migrations. We present RUN, an efficient scheduler that reduces the multiprocessor problem to a series of uniprocessor problems. RUN significantly outperforms existing optimal algorithms with an upper bound of O(log m) average preemptions per job on m processors (≤ than 3 per job in all of our simulated task sets) and reduces to Partitioned EDF whenever a proper partitioning is found.
8136F0E9	For the performance of networked control system is limited to the network resources and compute resources, the scheduling strategy is the key factor. This paper proposed two level schedule strategy: First, the controller and sensor nodes can be configured as event-time hybrid driven mode to improve the utilization rate. Then, considering the error and error difference response, a BP neural network and fuzzy feedback scheduler that shares communication net is designed with the bandwidth constraints. Two different scheduling algorithms with stochastic delay are compared with respectively. Finally, the results of simulation highlights that proposed scheduling strategy can optimize the performance of control loop and is more flexible than the other algorithms in uncertain running conditions.
725C3850	 Mixed-criticality systems emerged with the aim of reconciling safety requirements and efficient use of multi-processor or uniprocessor platforms. On multi-processors, recent works on mixed-criticality have produced impressive results in terms of speed-up factor. But these solutions, based on Pfair-like scheduling algorithms, entail too many preemptions and migrations to be effectively used in real systems. As RUN is an optimal scheduling algorithm that is known to limit this problem, we propose MxC-RUN, an adaptation of RUN to mixed-criticality systems. We redefine RUN's primal servers as modal servers that allocate the overestimated time budget of their higher criticality tasks to execute lower criticality ones. These servers can be handled by RUN without any modification and preserve its performances in terms of preemptions and migrations. MxC-RUN earns a speed-up factor smaller than other multi-processors EDF-based mixed-criticality scheduling algorithms.
78B8F583	This paper deals with single machine scheduling problems with simple linear deterioration in which the processing time of a job is a simple linear function of its execution starting time. The objective is to determine the optimal schedule to minimize the weighted sum of the th is a positive integer number) power of waiting times. It is proved that the general problem can be solved in polynomial time. In addition, for the jobs with weak (strong) parallel chains and a series–parallel digraph precedence constraints, it is also proved that these problems can be solved in polynomial time, respectively.
80066DE7	Scheduling theory holds great promise as a means to a priori validate timing correctness of real-time applications. However, there currently exists a wide gap between scheduling theory and its implementation in operating system kernels running on specific hardware platforms. The implementation of any particular scheduling algorithm introduces overhead and blocking components which must be accounted for in the timing correctness validation process. This paper presents a methodology for incorporating the costs of scheduler implementation within the context of fixed priority scheduling algorithms. Both event-driven and timer-driven scheduling implementations are analyzed. We show that for the timer-driven scheduling implementations the selection of the timer interrupt rate can dramatically affect the schedulability of a task set, and we present a method for determining the optimal timer rate. We analyzed both randomly generated and two well-defined task sets and found that their schedulability can be significantly degraded by the implementation costs. Task sets that have ideal breakdown utilization over 90% may not even be schedulable when the implementation costs are considered. This work provides a first step toward bridging the gap between real-time scheduling theory and implementation realities. This gap must be bridged for any meaningful validation of timing correctness properties of real-time applications.
76FE392E	A mixed-criticality system consists of multiple components with different criticalities. While mixed-criticality scheduling has been extensively studied for the uniprocessor case, the problem of efficient scheduling for the multiprocessor case has largely remained open. We design a fluid model-based multiprocessor mixed-criticality scheduling algorithm, called MC-Fluid, in which each task is executed in proportion to its criticality-dependent rate. We propose an exact schedulability condition for MC-Fluid and an optimal assignment algorithm for criticality-dependent execution rates with polynomial complexity. Since MC-Fluid cannot construct a schedule on real hardware platforms due to the fluid assumption, we propose MC-DP-Fair algorithm, which can generate a non-fluid schedule while preserving the same schedulability properties as MC-Fluid. We show that MC-Fluid has a speedup factor of (1 + v 5)/2 ( 1.618), which is best known in multiprocessor MC scheduling, and simulation results show that MC-DP-Fair outperforms all existing algorithms
78F818A7	Emerging reconfigurable systems attain high performance with embedded optimized cores. For mapping designs on such special architectures, synthesis tools, that are aware of the special capabilities of the underlying architecture are necessary. We propose an algorithm to perform simultaneous scheduling and binding, targeting embedded reconfigurable systems. The algorithm differs from traditional scheduling methods in its capability of efficiently utilizing embedded blocks within the reconfigurable system. The algorithm can be used to implement several other scheduling techniques, such as ASAP, ALAP, and list scheduling. Hence we refer to it as a super-scheduler. The algorithm is a path-based scheduling algorithm. At each step, an individual path from the input DFG is scheduled. The experiments with several DFGs extracted from MediaBench suite indicate promising results. The scheduler presents the capability to perform the trade-off between maximally utilizing the high-performance embedded blocks and exploiting parallelism in the schedule.
80C37553	An investigation is conducted of two protocols belonging to the priority inheritance protocols class; the two are called the basic priority inheritance protocol and the priority ceiling protocol. Both protocols solve the uncontrolled priority inversion problem. The priority ceiling protocol solves this uncontrolled priority inversion problem particularly well; it reduces the worst-case task-blocking time to at most the duration of execution of a single critical section of a lower-priority task. This protocol also prevents the formation of deadlocks. Sufficient conditions under which a set of periodic tasks using this protocol may be scheduled is derived.
7D8236E4	Functional, instruction-based self-testing of microprocessors has emerged as an effective alternative or supplement to other testing approaches, and is progressively adopted by major microprocessor manufacturers. In this paper, we study, for first time, the applicability of functional self-testing on bus-based symmetric multiprocessors (SMP) and the exploitation of SMPs parallelism during testing. We focus on the impact of the memory system architecture and the cache coherency mechanisms on the execution of self-test programs on the processor cores. We propose a generic self-test routines scheduling algorithm aiming at the reduction of the total test application time for the SMP by reducing both bus contention and data cache coherency invalidation. We demonstrate the proposed solutions with detailed experiments in two-core and four-core SMP benchmarks based on a RISC processor core.
7C3D294D	Carrier aggregation (CA) is one of the promising techniques for the further advancements of the third-generation (3G) long-term evolution (LTE) system, referred to as LTE-Advanced. When CA is applied, a well-designed carrier scheduling (CS) scheme is essential to the LTE-Advanced system. Joint user scheduling (JUS) and separated random user scheduling (SRUS) are two straightforward CS schemes. JUS is optimal in performance but with very high complexity, whereas SRUS is contrary. Consequently, the authors propose a novel CS scheme, termed as `separated burst-level scheduling` (SBLS). In SBLS, the connected component carrier (CC) of one user can be changed in burst level, whereas in SRUS, it is fixed. Meanwhile, SBLS limits the users to receive from only one of the CCs simultaneously, which is the same as that in SRUS. In this way, SBLS is expected to achieve higher resource utilisation than SRUS but with acceptable complexity increase. There are two factors that are important to the performance of SBLS, namely the dispatching granularity and the dispatching policy. The authors` analysis is verified by system-level simulations. The simulation results also show that the resultant performance gain of SBLS over SRUS is notable and increasing dispatching granularity will quickly deteriorate the performance of SBLS.
7A73E4A7	This article presents a detailed discussion of LRE-TL (Local Remaining Execution-TL-plane), an algorithm that schedules hard real-time periodic and sporadic task sets with unconstrained deadlines on identical multiprocessors. The algorithm builds upon important concepts such as the TL-plane construct used in the development of the LLREF algorithm (Largest Local Remaining Execution First). This article identifies the fundamental TL-plane scheduling principles used in the construction of LLREF . These simple principles are examined, identifying methods of simplifying the algorithm and allowing it to handle a more general task model. For example, we identify the principle that total local utilization can never increase within any TL-plane as long as a minimal number of tasks are executing. This observation leads to a straightforward approach for scheduling task arrivals within a TL-plane. In this manner LRE-TL can schedule sporadic tasks and tasks with unconstrained deadlines. Like LLREF, the LRE-TL scheduling algorithm is optimal for task sets with implicit deadlines. In addition, LRE-TL can schedule task sets with unconstrained deadlines provided they satisfy the density test for multiprocessor systems. While LLREF has a O(n2) runtime per TL-plane, LRE-TL’s runtime is O(nlog n) per TL-plane.
7DF1D46B	Two important performance metrics in collaborative systems are local and remote response times. Previous analytical and simulation work has shown that these response times depend on three important factors: processing architecture, communication architecture, and scheduling of tasks dictated by these two architectures. We show that it is possible to create a system that improves response times by dynamically adjusting these three system parameters in response to changes to collaboration parameters such as new users joining and network delays changing. We present practical approaches for collecting collaboration parameters, computing multicast overlays, applying analytical models of previous work, preserving coupling semantics during optimizations, and keeping overheads low. Simulations and experiments show that the system improves performance in practical scenarios.